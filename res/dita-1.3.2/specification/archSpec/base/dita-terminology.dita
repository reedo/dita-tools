<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="terminology" xml:lang="en-us">
<title>DITA terminology and notation</title>
<shortdesc>The DITA specification uses specific notation and terms to define the components of the
    DITA standard. </shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>notation<indexterm>attribute types</indexterm><indexterm>element
            types</indexterm></indexterm>
        <indexterm>terminology<indexterm>addressing and linking</indexterm><indexterm>basic
            concepts</indexterm><indexterm>modules</indexterm><indexterm>non-normative
            information</indexterm><indexterm>normative
            information</indexterm><indexterm>specialization</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
<conbody>
<section id="notation"><title>Notation</title>
      <!--<draft-comment author="Kristen Eberlein" time="24 March 2014" disposition="open"><p>Stan Doherty made the following comment in review #1 concerning the "Cascading of attributes and metadata in a DITA map" topic; do we need to add the term cascading to our terminology that is explicated in this topic?</p><p>The explicit distinction here between containment hierarchy (mentioned several times elsewhere in the spec) and element type hierarchy is very nice . . . might be worth promoting to our list of key concepts.</p></draft-comment>-->                <p><ph>The
following conventions are used throughout the                    
     specification:</ph><dl><dlentry>
<dt>attribute types</dt>
<dd>Attribute names are preceded by @ to distinguish them from elements or surrounding text, for
              example, the <xmlatt>props</xmlatt> or the <xmlatt>class</xmlatt> attribute.</dd>
</dlentry><dlentry>
<dt>element types</dt>
<dd>Element names are delimited with angle brackets (&lt; and >) to distinguish them from
surrounding text, for example, the <xmlelement>keyword</xmlelement> or the
<xmlelement>prolog</xmlelement> element.</dd>
</dlentry></dl></p>                <p>In general, the unqualified use of the term <term>map</term> or
          <term>topic</term> can be interpreted to mean "a <xmlelement>map</xmlelement> element and
        any specialization of a <xmlelement>map</xmlelement> element " or "a
          <xmlelement>topic</xmlelement> element or any specialization of a
          <xmlelement>topic</xmlelement> element." <ph >Similarly, the unqualified use
          of an element type name (for example, <xmlelement>p</xmlelement>) can be interpreted to
          mean the element type or any specialization of the element type.</ph></p> 
         </section>
<section id="normative"><title><ph>Normative and non-normative information</ph></title> 
              <p>The DITA specification contains normative and non-normative
information:<dl><dlentry>
<dt>Normative information</dt>
<dd>Normative information is the formal portion of the specification
                                   that describes the rules and requirements
that make up the DITA                                    standard
and which must be followed.</dd>
</dlentry><dlentry>
<dt>Non-normative information</dt>
<dd>Non-normative information includes descriptions that provide background, examples, notes, and
other useful information that are not formal requirements or rules that must be followed.</dd>
</dlentry></dl></p>                <p>All information in the specification should be considered normative unless it is
an example, a note, an appendix, or is explicitly labeled as non-normative. The DITA specification
contains examples to help clarify or illustrate specific aspects of the specification. Because
examples are specific rather than general, they might not illustrate all aspects or be the only way
to accomplish or implement an aspect of the specification. Therefore all examples are
non-normative.</p> 
         </section>
<section id="basic-terminology"><title>Basic DITA terminology</title>   
            <p>The following terminology is used to discuss basic
DITA concepts:</p>                <dl>
<!--<dlentry><dt>DITA attribute type</dt><dd>An attribute type that is one of the following:<ul><li>One of the base attribute types that are defined by the DITA specification</li><li>A specialization of either the <xmlatt>base</xmlatt> or <xmlatt>props</xmlatt> attribute</li></ul></dd></dlentry>--><dlentry>
<dt>DITA document</dt>
<dd>An XML document that conforms to the requirements of this specification. A DITA document <term
              outputclass="RFC-2119">MUST</term> have as its root element one of the following elements:<ul>
              <li><xmlelement>map</xmlelement> or a specialization of the
                  <xmlelement>map</xmlelement> element</li>
              <li><xmlelement>topic</xmlelement> or a specialization of the
                  <xmlelement>topic</xmlelement> element</li>
              <li><xmlelement>dita</xmlelement>, which cannot be specialized, but which allows
                documents with multiple sibling topics</li>
            </ul></dd>
</dlentry><dlentry>
<dt>DITA document type</dt>
<dd>A unique set of structural modules, domain modules, and constraint modules that taken together
provide the XML element and attribute declarations that define the structure of DITA documents. </dd>
</dlentry><dlentry>
<dt>DITA document-type shell</dt>
<dd>A set of <ph >DTD, XSD, or RELAX NG</ph> declarations that implement
            a DITA document type by using the rules and design patterns that are included in the
            DITA specification. A DITA document-type shell includes and configures one or more
            structural modules, zero or more domain modules, and zero or more constraint modules.
            With the exception of the optional declarations for the <xmlelement>dita</xmlelement>
            element and its attributes, DITA document-type shells do not declare any element or
            attribute types directly.</dd>
</dlentry><dlentry>
<dt>DITA element</dt>
<dd>An XML element instance whose type is a DITA element type. DITA elements must exhibit a
              <xmlatt>class</xmlatt> attribute that has a value that conforms to the rules for
            specialization hierarchy specifications.</dd>
</dlentry><dlentry>
<dt>DITA element type</dt>
<dd>An element type that is either one of the base element types that are defined by the DITA
specification, or a specialization of one of the base element types.</dd>
</dlentry><dlentry>
<dt>map instance</dt>
<dd>An occurrence of a map type in a DITA document.</dd>
</dlentry><dlentry>
<dt>map type</dt>
          <dd>A map or a specialization of map that defines a set of relationships among topic
            instances.</dd>
          <!--<dd>An element type that defines a set of relationships among topic instances. The map type provides the root element and, through the contained element types, the substructure for the map instances. The map substructure provides hierarchy, group, and matrix organization of references to topic instances.</dd>-->
</dlentry><dlentry>
<dt>structural type instance</dt>
<dd>An occurrence of a topic type or a map type in a DITA document.</dd>
</dlentry><dlentry>
<dt>topic instance </dt>
<dd>An occurrence of a topic type in a DITA document.</dd>
</dlentry><dlentry>
<dt>topic type</dt>
          <dd>A topic or a specialization of topic that defines a complete unit of content.</dd>
          <!--<dd>An element type that defines a complete unit of content. The topic type provides the root element for the topic and, through the contained element types, the substructure for the topic instances. The root element of the topic type is not necessarily the same as the root element of a document type; document types can nest multiple topic types and might also declare non-DITA wrapper elements as the root element for compatibility with other processes.</dd>-->
</dlentry></dl>           </section>
<section id="specialization-terminology"><title>Specialization terminology</title> 
              <p>The following terminology is used to discuss DITA
specialization:</p>                <dl>
<!--<dlentry><dt>base content model</dt><dd>The content model of a DITA element before specialization or the application of constraints or extensions.</dd></dlentry>--><dlentry>
<dt>base type</dt>
<dd>An element or attribute type that is not a specialization. All
base                               types are defined by the DITA specification.</dd>
</dlentry><dlentry>
<dt>extension element</dt>
<dd>Within a vocabulary module, an element type that can be extended,
                              replaced, or constrained for use in
a DITA document type.</dd>
</dlentry><dlentry>
<dt>generalization</dt>
<dd>The process by which a specialized element is transformed into a less-specialized ancestor
element or a specialized attribute is transformed into a less-specialized ancestor attribute. The
original specialization-hierarchy information can be preserved in the generalized instance; this
allows the original specialized type to be recreated from the generalized instance.</dd>
</dlentry>
<!--<dlentry><dt>restricted content model</dt><dd>For a DITA element type, a content model that has been restricted from the base content model for the element type by one or more of the following mechanisms:<ul><li>Removing optional elements</li><li>Requiring optional elements</li><li>Ordering of unordered elements</li><li>Restricting repeatable (but optional) elements from repeating</li></ul>Content models can be restricted through the use of constraint modules or through specialization.</dd></dlentry>-->
<!--<dlentry><dt>selective domain extension</dt><dd>An extension that replaces an extension element with element types that are defined in an domain module, thus making the base type unavailable in the DITA document-type shell that configures the extension.</dd></dlentry>--><dlentry>
<dt>specialization</dt>
<dd>(1) The act of defining new element or attribute types as a semantic
                              refinement of existing element or attribute
types</dd>
<dd>(2) An element or attribute type that is a specialization of a
base                               type</dd>
<dd>(3) A process by which a generalized element is transformed into
one of                               its more specialized element
types or a generalized attribute is                              
transformed into a more specialized attribute.</dd>
</dlentry><dlentry>
<dt>specialization hierarchy</dt>
<dd>The sequence of element or attribute types, from the most general
to                               most specialized, from which a given
element or attribute type is                               specialized.
The specialization hierarchy for a DITA element is               
               formally declared through its <xmlatt>class</xmlatt> attribute.</dd>
</dlentry>
<!--<dlentry><dt>specialization parent</dt><dd>For a given DITA element type, the most specialized of its ancestors in its specialization hierarchy.</dd></dlentry>-->
<!--<dlentry><dt>specialized attribute type</dt><dd>An attribute type that is defined as a semantic refinement of another attribute type. The attribute type must be specialized from either the <xmlatt>base</xmlatt> or <xmlatt>props</xmlatt> attribute, and its range of permissible values must be a subset of or identical to the values allowed by the original attribute type.</dd></dlentry>-->
<!--<dlentry><dt>specialized element type</dt><dd>An element type that is defined as a semantic refinement of an existing element type. The content allowed by the specialized element type must be a subset of or identical to the content allowed by the original element type. Within a DITA document, all specialized element types must be refinements of one of the base element types, with the exception of elements that are used in the context of <xmlelement>foreign</xmlelement> or <xmlelement>unknown</xmlelement> elements.</dd></dlentry>--><dlentry>
<dt>structural type</dt>
<dd>A topic type or map type.</dd>
</dlentry></dl>           </section>
<section id="modules"><title>DITA modules</title>             
  <p>The following terminology is used to discuss DITA modules:</p> 
              <dl><dlentry>
<dt>attribute domain module</dt>
<dd>A domain module that defines a specialization of either the <xmlatt>base</xmlatt> or
<xmlatt>props</xmlatt> attribute.</dd>
</dlentry><dlentry>
<dt>constraint module</dt>
<dd>A set of declarations that imposes additional constraints onto
the                               element or attribute types that
are defined in a specific vocabulary                             
 module.</dd>
</dlentry><dlentry>
<dt>domain module</dt>
<dd>A vocabulary module that defines a set of element types or an attribute type that supports a
specific subject or functional area.</dd>
</dlentry><dlentry>
<dt>element domain module</dt>
<dd>A domain module that defines one or more element types for use
within                               maps or topics.</dd>
</dlentry><dlentry>
<dt>structural module</dt>
<dd>A vocabulary module that defines a top-level map type or topic type.</dd>
</dlentry><dlentry>
<dt>vocabulary module</dt>
<dd>A set of element or attribute declarations.</dd>
</dlentry></dl>           </section>
<section id="linking-and-addressing"><title>Linking and addressing terms</title>
<p>The following terminology is used to discuss linking and addressing terms:</p>
<dl>
<dlentry id="referenced-element">
          <dt>referenced element</dt>
          <dd>An element that is referenced by another DITA element. See also <term>referencing
              element</term>.</dd>
          <dd><b>Example</b><p>Consider the following code sample from a
                <filepath>installation-reuse.dita</filepath> topic. The
                <xmlelement>step</xmlelement> element that it contains is a referenced element;
              other DITA topics reference the <xmlelement>step</xmlelement> element by using the
                <xmlatt>conref</xmlatt>
              attribute.<codeblock>&lt;step id="run-startcmd-script">
	&lt;cmd>Run the startcmd script that is applicable to your operating-system environment.&lt;/cmd>
&lt;/step></codeblock></p></dd>
        </dlentry>
<dlentry id="referencing-element">
          <dt>referencing element</dt>
          <dd>An element that references another DITA element by specifying an addressing attribute.
            See also <term>referenced element</term> and <term>addressing attribute</term></dd>
          <dd><b>Example</b><p>The following <xmlelement>step</xmlelement> element is a referencing
              element. It uses the <xmlatt>conref</xmlatt> attribute to reference a
                <xmlelement>step</xmlelement> element in the
                <filepath>installation-reuse.dita</filepath>
              topic.<codeblock>&lt;step conref="installation-reuse.dita#reuse/run-startcmd-script">
	&lt;cmd/>
&lt;/step></codeblock></p></dd>
        </dlentry>
<dlentry>
<dt>addressing attribute</dt>
<dd>An attribute, such as <xmlatt>conref</xmlatt>, <xmlatt>conkeyref</xmlatt>,
<xmlatt>keyref</xmlatt>, and <xmlatt>href</xmlatt>, that specifies an address.</dd>
</dlentry>
</dl>
</section>
<section id="keys"><title>Terminology related to keys</title>
<p>The following terminology is used to discuss keys:</p>
<dl>
<dlentry >
<dt>resource</dt>
<dd >For the purposes of keys and key resolution, one of the following:<ul>
<li>An object addressed by URI</li>
<li>Metadata specified on a resource, such as a <xmlatt>scope</xmlatt> or <xmlatt>format</xmlatt>
attribute</li>
<li>Text or metadata located within a <xmlelement>topicmeta</xmlelement> element</li>
</ul></dd>
</dlentry>
<dlentry>
<dt>key</dt>
<dd>A name for a resource. <ph >See <xref href="using-keys-for-addressing.dita"/> for
more information.</ph></dd>
</dlentry>
<dlentry>
<dt>key definition</dt>
<dd>A <xmlelement>topicref</xmlelement> element that binds one or more key names to <ph
>zero or more</ph> resources.</dd>
</dlentry>
<dlentry>
<dt>key reference</dt>
<dd>An attribute that references a key, such as <xmlatt>keyref</xmlatt> or
<xmlatt>conkeyref</xmlatt>.<!--<draft-comment author="chris.nitchie" disposition="accepted">Look for places where we talk about elements as key references to make sure we're being consistent - in some older content we referred to things like &lt;topicref> as a key reference, and need to clean it up.<p>Update April 16 2015: Kris will scan content to ensure this is complete.</p></draft-comment>--></dd>
</dlentry>
<dlentry>
<dt>key space</dt>
<dd>A list of key definitions that are used to resolve key references.</dd>
</dlentry>
<dlentry>
<dt>effective key definition</dt>
<dd>The definition for a key within a key space that is used to resolve references to that key. A
key might have multiple definitions within a key space, but only one of those definitions is
effective.</dd>
</dlentry>
<dlentry>
<dt>key scope</dt>
<dd>A map or section of a map that defines its own key space and serves as the resolution context
for its key references.</dd>
</dlentry>
</dl>
</section>
    <section  id="map-terms">
      <title>Map terms</title>
      <dl>
        <dlentry>
          <dt>root map</dt>
          <dd>The DITA map that is provided as input for a processor.</dd>
        </dlentry>
        <dlentry>
          <dt>submap</dt>
          <dd>A DITA map that is referenced with a <xmlatt>scope</xmlatt> attribute that evaluates
            as "local". The value of the scope attribute might be explicitly set, be defaulted, or
            cascade from another element.</dd>
        </dlentry>
        <dlentry>
          <dt>peer map</dt>
          <dd>A DITA map that is referenced with a <xmlatt>scope</xmlatt> attribute that evaluates
            as "peer". The value of the scope attribute might be explicitly set, be defaulted, or
            cascade from another element.</dd>
        </dlentry>
        <dlentry>
          <dt>map branch</dt>
          <dd >A <xmlelement>topicref</xmlelement> element or a specialization of
              <xmlelement>topicref</xmlelement>, along with any child elements and all resources
            that are referenced by the original element or its children.</dd>
        </dlentry>
        <!--<dlentry><dt>map tree</dt><dd><draft-comment author="Kristen Eberlein" time="15 April 2015" disposition="open"><p>Comment by Eliot Kimber in the targeted review of linking:</p><p>The "map tree" is the tree of *maps* only, that is, maps and submaps. It is distinct from the topicrefs contained by those maps.</p><p>Part of the definitional challenge here is that the map tree is important for the purposes of key space construction: the map tree determines key definition precedence, while the topicref tree reflects the *union* of the topicref trees from all the maps (and the existence of the submaps is not maintained in the final resolved topicref tree).</p><p>Certainly the term "branch" is accurate in reference to the map tree, but the term "branch" is, I think, more closely associated with subparts of the *topicref* tree. So unqualified "branch" could be confusing. As far as I'm concerned, "root map tree" and "map tree" are equivalent: the "map tree" *is* the tree of maps rooted at the root map, so "root map tree" is redundant. In addition, subtrees (branches) of the map tree have no particular processing implications: key space construction only considers the full map tree. While key spaces can now be defined by individual submaps, they still participate (and are influenced by) the ancestor key spaces ultimately anchored to the root map, so there's no useful sense in which branches of the map tree can be usefully processed or considered in isolation. </p></draft-comment></dd></dlentry>-->
      </dl>
    </section>
</conbody>
</concept>

