<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept_rrq_p45_dn" >
  <title>RELAX NG: Coding requirements for document-type shells</title>
  <shortdesc>A document-type shell integrates one or more topic type or map type modules, zero or
    more domain modules, and zero or more constraint modules.</shortdesc>
  <conbody>
    <p>Because RELAX NG modules are self-integrating, document-type shells only need to include
      vocabulary modules. Unlike DTDs, there is no separate specification required in order to
      integrate domain and nested topic elements into the base content models.
      <!--Also,  In addition, the names of element types that define <xmlatt>id</xmlatt> attributes of type "ID" must be listed in the redefinition of the "any" pattern that is required in each document-type shell.--></p>
    <!--<note>For modules that use the <xmlelement>moduleDesc</xmlelement> element, the <xmlatt>domains</xmlatt> attribute contribution <term outputclass="RFC-2119" rev="terminology">SHOULD</term> be in the <xmlelement>domainsContribution</xmlelement> element. This enables tools to automatically construct the <xmlatt>domains</xmlatt> attribute value in document-type shells as an aid to authoring or automatically generating document-type shells.<draft-comment author="Kristen Eberlein" time="15 February 2014" disposition="open">Why is this a note?</draft-comment><draft-comment author="robander" time="16 February 2015">Also: after encountering dubious language in DTD/RNG topics about auto-assembly, do we really need to continue making or highlighting rules that are there to enable automatic generation of shells? Existing rules for DTD/XSD were never as useful as originally imagined, and I don't think the rules designed to aid in auto-assembly actually did so.</draft-comment></note>-->
    <dl>
      <dlentry>
        <dt>Root element declaration</dt>
        <dd>
          <p>Document type shells use the RELAX NG start declaration to specify the root element of
            the document type. The <xmlelement>start</xmlelement> element defines one root element,
            using a reference to a <codeph><varname>tagname</varname>.element</codeph> pattern.</p>
          <p otherprops="examples">For
            example:<codeblock>&lt;div>
  &lt;a:documentation>ROOT ELEMENT DECLARATION&lt;/a:documentation>
  &lt;start combine="choice">
    &lt;ref name="topic.element"/>
  &lt;/start>
&lt;/div></codeblock></p>
        </dd>
      </dlentry>
      <dlentry>
        <dt>DITA domains attribute</dt>
        <dd>
          <p>The document-type shell must list the domain or structural modules that are named as
            dependencies in the <xmlatt>domains</xmlatt> attribute value. Unlike DTDs, a default
            value for <xmlatt>domains</xmlatt> cannot automatically be constructed using RELAX NG
            facilities. Instead, the values used to construct <xmlatt>domains</xmlatt> are taken
            from each vocabulary and constraint module, in addition to any domains contributions
            based on constraints implemented within the shell. </p>
          <p otherprops="examples">For
            example:<codeblock>&lt;div>
  &lt;a:documentation>DOMAINS ATTRIBUTE&lt;/a:documentation>
  &lt;define name="domains-att">
    &lt;optional>
      &lt;attribute name="domains"
                 a:defaultValue="(topic hazard-d)
                                 (topic hi-d)
                                 (topic indexing-d)
                                 (topic ut-d)
                                 a(props deliveryTarget)"
      />
    &lt;/optional>
  &lt;/define>
&lt;/div></codeblock></p>
        </dd>
      </dlentry>
      <dlentry id="content-constraint">
        <dt>Content constraint integration</dt>
        <dd>
          <p>The document-type shell must include any constraint modules. Constraint modules include
            the module they override and override the patterns that they constrain directly in the
            constraint module itself. Any module that is constrained in this section (including the
            base topic or map modules) will be left out of the following section.</p>
          <p otherprops="examples">For example, when the following constraint
            is included for the task module, the task module itself will <i>not</i> be included in
            the shell; the task module itself is included within
              <filepath>strictTaskbodyConstraintMod.rng</filepath>:<codeblock>&lt;div>
&lt;a:documentation>CONTENT CONSTRAINT INTEGRATION&lt;/a:documentation>
  &lt;include href="strictTaskbodyConstraintMod.rng">
    &lt;define name="task-info-types">
      &lt;ref name="task.element"/>
    &lt;/define>            
  &lt;/include>
&lt;/div></codeblock></p>
        </dd>
      </dlentry>
      <dlentry id="module-inclusion">
        <dt>Module inclusions</dt>
        <dd>
          <p>The document-type shell must include any unconstrained domain or structural module. If
            the top-level map or topic type is unconstrained, it is also included in this
            section.</p>
          <p otherprops="examples">For
            example:<codeblock>&lt;div>
  &lt;a:documentation>MODULE INCLUSIONS&lt;/a:documentation>
  &lt;include href="topicMod.rng"/>
  &lt;include href="highlightDomainMod.rng"/>
  &lt;include href="utilitiesDomainMod.rng"/>
  &lt;include href="indexingDomainMod.rng"/>
  &lt;include href="hazardstatementDomainMod.rng"/>
&lt;/div></codeblock></p>
        </dd>
      </dlentry>
      <dlentry id="constrain-domains-in-shell">
        <dt>Constraining domains in the shell</dt>
        <dd>
          <p>Domains can be constrained to disallow some extension elements without the use of a
            separate module file. This is done by overriding the base type pattern within the
            reference to the domain module. In this case, the constraint represented by the pattern
            redefinition still must be declared in the <xmlatt>domains</xmlatt> attribute; the
              <xmlatt>domains</xmlatt> contribution should be documented in the document-type shell
            with the constraint. There is not a designated section of the document-type shell for
            this type of constraint; it can be placed either in <xref
              href="#concept_rrq_p45_dn/content-constraint" format="dita"/> or <xref
              href="#concept_rrq_p45_dn/module-inclusion" format="dita"/>.</p>
          <p otherprops="examples">The following example demonstrates the portion of a document type
            shell that includes the highlight domain module while directly constraining that module
            to remove the <xmlelement>u</xmlelement> element. The
              <xmlelement>ditaarch:domainsContribution</xmlelement> element is used to document the
              <xmlatt>domains</xmlatt> contribution for this constraint. </p>
          <codeblock otherprops="examples">
  &lt;div>
    &lt;a:documentation>MODULE INCLUSIONS&lt;/a:documentation>
    &lt;include href="topicMod.rng"/>
    &lt;include href="hazardstatementDomainMod.rng"/>
    &lt;include href="highlightDomainMod.rng">
      &lt;ditaarch:domainsContribution
        >(topic hi-d-noUnderline-c)&lt;/ditaarch:domainsContribution>
      &lt;define name="u">
        &lt;notAllowed>&lt;/notAllowed>
      &lt;/define>
    &lt;/include>
    &lt;include href="indexingDomainMod.rng"/>
    &lt;include href="utilitiesDomainMod.rng"/>
  &lt;/div>
</codeblock>
        </dd>
      </dlentry>
      <dlentry>
        <dt>ID-defining element overrides</dt>
        <dd>
          <p>This section must declare any element in the document type that uses an
              <xmlatt>id</xmlatt> attribute with an XML data type of "ID". This declaration is
            required in order to avoid errors from RELAX NG parsers that would otherwise complain
            about different uses of the <xmlatt>id</xmlatt> attribute. </p>
          <p>Typically, this section lists only a few elements, such as topic types or the
              <xmlelement>anchor</xmlelement> element, but it could include specializations that
            constrain <xmlatt>id</xmlatt>. In addition, foreign vocabularies require you to include
            exclusions for the namespaces used by those domains.</p>
          <p otherprops="examples">For example, this section declares that
              <xmlelement>topic</xmlelement> and <xmlelement>task</xmlelement> use an
              <xmlatt>id</xmlatt> attribute with an XML data type of ID, along with any elements in
            the SVG or MathML namespaces. Each of these is excluded from the "any" pattern by
            placing them within the <xmlelement>except</xmlelement> rule as shown
            below:<codeblock>  &lt;div&gt;
      &lt;a:documentation&gt; ID-DEFINING-ELEMENT OVERRIDES &lt;/a:documentation&gt;
      &lt;define name="any"&gt;
         &lt;zeroOrMore&gt;
            &lt;choice&gt;
               &lt;ref name="idElements"/&gt;
               &lt;element&gt;
                  &lt;anyName&gt;
                     &lt;except&gt;
                        &lt;name&gt;topic&lt;/name&gt;
                        &lt;name&gt;task&lt;/name&gt;
                        &lt;nsName ns="http://www.w3.org/2000/svg"/&gt;
                        &lt;nsName ns="http://www.w3.org/1998/Math/MathML"/&gt;
                     &lt;/except&gt;
                  &lt;/anyName&gt;
                  &lt;zeroOrMore&gt;
                     &lt;attribute&gt;
                        &lt;anyName/&gt;
                     &lt;/attribute&gt;
                  &lt;/zeroOrMore&gt;
                  &lt;ref name="any"/&gt;
               &lt;/element&gt;
               &lt;text/&gt;
            &lt;/choice&gt;
         &lt;/zeroOrMore&gt;
      &lt;/define&gt;
  &lt;/div&gt;
</codeblock></p>
        </dd>
      </dlentry>
    </dl>
  </conbody>
</concept>
