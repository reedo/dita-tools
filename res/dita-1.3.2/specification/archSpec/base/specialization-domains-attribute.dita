<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="domainsatt" xml:lang="en-us">
<title><xmlatt>domains</xmlatt> attribute rules and syntax</title>
<shortdesc >The <xmlatt>domains</xmlatt> attribute enables processors to
    determine whether two elements or two documents use compatible domains. The attribute is
    declared on the root element for each topic or map type. Each structural, domain, and constraint
    module defines its ancestry as a parenthesized sequence of space-separated module names; the
    effective value of the <xmlatt>domains</xmlatt> attribute is composed of these parenthesized
    sequences.</shortdesc>
<conbody>
    <p>Document type shells collect the values that are provided by each module to construct the
      effective value of the <xmlatt>domains</xmlatt> attribute. Processors can examine the
      collected values when content from one document is used in another, in order to determine
      whether the content is compatible.</p>
    <p otherprops="examples">For example, when an author pastes content from one topic into another
      topic within an XML editor, the application can use the <xmlatt>domains</xmlatt> attribute to
      determine if the two topics use compatible domains. If not, copied content from the first
      topic might need to be generalized before it can be placed in the other topic. </p>
    <p otherprops="examples">The <xmlatt>domains</xmlatt> attribute serves the same function when an
      element uses the <xmlatt>conref</xmlatt> attribute to reference a more specialized version of
      the element. For example, a <xmlelement>note</xmlelement> element in a concept topic conrefs a
        <xmlelement>hazardstatement</xmlelement> element in a reference document. If the hazard
      statement domain is not available in the concept topic, the
        <xmlelement>hazardstatement</xmlelement> element is generalized to a
        <xmlelement>note</xmlelement> element when the content reference is resolved.</p>
    <section id="syntax">
      <title>Syntax and rules</title>
      <!--<draft-comment author="Kristen Eberlein" time="16 May 2015" disposition="open"><p>The code blocks within this section that outline the syntax are confusing. They do not use any defined markup for syntax, nor are they explained. Robert and I are at a loss as how best to remedy this quickly.</p><p>This design has grown in a less than optimal way; see the corresponding topics from the 1.1 and 1.2 specs:</p><ul><li><xref href="http://docs.oasis-open.org/dita/v1.1/CS01/archspec/domainsatt.html" format="html" scope="external">The domains attribute</xref></li><li><xref href="http://docs.oasis-open.org/dita/v1.2/os/spec/archSpec/domainsatt.html#domainsattl" format="html" scope="external">2.1.4.3.4 Domain usage declaration (the @domains attribute)</xref></li></ul></draft-comment>-->
      <p>Each domain and constraint module <term outputclass="RFC-2119" 
          >MUST</term> provide a value for use by the <xmlatt>domains</xmlatt> attribute. Each
        structural vocabulary module <term outputclass="RFC-2119">SHOULD</term>
        provide a value for use by the <xmlatt>domains</xmlatt> attribute, and it <term
          outputclass="RFC-2119">MUST</term> do so when it has a dependency on
        elements from any module that is not part of its specialization ancestry.</p>
      <p >Values provided for the <xmlatt>domains</xmlatt> attribute values are
        specified from root module (map or topic) to the provided module.</p>
      <dl>
        <dlentry id="structural-modules">
          <dt>structural modules</dt>
          <dd>
            <p>The value of the <xmlatt>domains</xmlatt> attribute includes each module in the
              specialization ancestry:</p>
            <codeblock> '(', <varname>topic-or-map</varname>, (' ', <varname>module</varname>)+, ')'</codeblock>
            <p otherprops="examples">For example, consider the <xmlelement>glossentry</xmlelement>
              specialization, in which the topic type is specialized to the concept type, and the
              concept type is specialized to glossentry. The structural module contribution to the
              value of the <xmlatt>domains</xmlatt> attribute for the glossentry structural module
              is <codeph>(topic concept glossentry)</codeph>.</p>
          </dd>
        </dlentry>
        <dlentry  id="structural-modules-with-dependencies">
          <dt>structural modules with dependencies</dt>
          <dd>
            <p>Structural modules can directly reference or specialize elements from modules that
              are outside of their specialization ancestry. They also can define specialized
              elements that reference specialized attributes. In these cases the structural module
              has a dependency on the non-ancestor module, and the structural module contribution to
              the value of the <xmlatt>domains</xmlatt> attribute <term outputclass="RFC-2119"
                >MUST</term> include the names of each dependent, non-ancestor
              module.</p>
            <p>Dependencies are included in the value of the <xmlatt>domains</xmlatt> attribute
              following the name of the structural module with the dependency on the non-ancestor
              module. Domain or attribute modules are appended to the name of the structural module
              with the dependency on the non-ancestor module, or to previous dependencies, separated
              by "+". Dependencies on structural specialization modules are appended to the name of
              the structural module with the dependency on the non-ancestor module, or to previous
              dependencies, separated by "++". The syntax is the same as for other structural
              modules, except that added modules can include these
              dependencies:<codeblock> '(', <varname>topic-or-map</varname>, (' ', <varname>module-plus-optional-dependency-list</varname>)+, ')'</codeblock></p>
            <p>When the structural module is included in a document-type shell, all dependency
              modules also are included along with their own <xmlatt>domains</xmlatt> values.</p>
            <!--<p rev="DITA1.3 proposal-13121">The structural type ancestry of the structural type whose elements are being reused. For example, if a troubleshooting module reuses elements from the task structural module, then it must include both a dependency on task in the troubleshooting ancestry value, and the ancestry of task in a separate value: <codeph>(topic troubleshooting++task) (topic task)</codeph></p>-->
            <p otherprops="examples"> For example, the cppAPIRef structural module is specialized
              from reference, which is specialized from topic. The cppAPIRef module has a dependency
              on the cpp-d element domain and on the compilerTypeAtt-d attribute domain. The
              dependencies are listed after the name of <codeph>cppApiref</codeph>:
              <codeblock>(topic reference cppApiRef+cpp-d+compilerTypeAtt-d)</codeblock></p>
            <p otherprops="examples">Similarly, a codeChecklist structural module is specialized
              from reference, which is specialized from topic. The codeChecklist module has a
              dependency on the pr-d domain and on the task structural specialization. Again, the
              dependencies are listed after the name of <codeph>codeChecklist</codeph>. The pr-d
              domain and the task module each contribute their own values, so taken together these
              modules contribute the following values:
              <codeblock>(topic reference codeChecklist+pr-d++task) (topic pr-d) (topic task)</codeblock></p>
          </dd>
        </dlentry>
        <dlentry id="element-domains">
          <dt>element domains</dt>
          <dd>
            <p>The value includes the structural type ancestry and, if applicable, the domain module
              ancestry from which the domain is specialized:</p>
            <codeblock> '(', <varname>topic-or-map</varname>, (' ', <varname>domain-module</varname>)+, ')'</codeblock>
          </dd>
          <dd otherprops="examples">For example, the highlighting domain (specialized from topic)
            supplies the following value: <codeph>(topic hi-d)</codeph>. A CPP domain that is
            specialized from the programming domain, which in turn is specialized from topic,
            supplies the following value: <codeph>(topic pr-d cpp-d)</codeph>.</dd>
        </dlentry>
        <dlentry id="structural-constraint-modules">
          <dt>structural constraint modules</dt>
          <dd>
            <p>The value includes the structural type ancestry followed by the name of the
              constraint domain:</p>
            <codeblock> '(', <varname>inheritance-hierarchy</varname> <varname>qualifier</varname><varname>Tagname</varname>-c, ')'</codeblock>
            <p>where:</p>
            <ul>
              <li id="inheritance-hierarchy-li"><varname>inheritance-hierarchy</varname> is the
                specialization hierarchy, for example, <codeph>topic task</codeph>.</li>
              <li id="qualifier-li"><varname>qualifier</varname> is a string that is specific to the
                constraints module and characterizes it, for example, "strict" or "requiredTitle" or
                "myCompany-".</li>
              <li id="Tagname-li"><varname>Tagname</varname> is the element type name with an
                initial capital, for example, "Taskbody"<ph > or
                "Topic"</ph>.</li>
              <li id="literal-c-li">The literal "-c" indicates that the name is the name of a
                constraint.</li>
            </ul>
            <p otherprops="examples">For example, the strictTaskbody constraint applies to the task
              module, which is specialized from topic, resulting in the following value:
                <codeph>(topic task strictTaskbody-c)</codeph>. </p>
            <p  id="indicating-strong-constraint">Optionally, a domains
              contribution can indicate a strong constraint by preceding the domains contribution
              with the letter "s". For example, <codeph>s(topic task strictTaskbody-c)</codeph>
              indicates a strong constraint.</p>
          </dd>
        </dlentry>
        <dlentry id="domain-constraint-modules">
          <dt>domain constraint modules</dt>
          <dd>
            <p>The value includes the specialization ancestry followed by the name of the constraint
              domain:</p>
            <codeblock> '(', <varname>inheritance-hierachy</varname> <varname>qualifier</varname><varname>domain</varname>Domain-c ')'</codeblock>
            <p>where:</p>
            <ul>
              <li><varname>inheritance-hierarchy</varname> is the specialization hierarchy, for
                example, <codeph>topic hi-d</codeph>.</li>
              <li><varname>qualifier</varname> is a string that is specific to the constraints
                module and characterizes it, for example, "noSyntaxDiagram" or "myCompany-".</li>
              <li><varname>domain</varname> is the name of the domain to which the constraints
                apply, for example, "Highlighting" or "Programming".</li>
              <li>The literal "-c" indicates that the name is the name of a constraint.</li>
            </ul>
            <p otherprops="examples" >For example, a domain constraint module that
              restricts the highlighting domain includes a value like the following: <codeph>(topic
                hi-d basic-HighlightingDomain-c)</codeph></p>
          </dd>
        </dlentry>
        <dlentry id="attribute-domains">
          <dt>attribute domains</dt>
          <dd>
            <p>The value uses an "a" before the initial parenthesis to indicate an attribute domain.
              Within the parenthesis, the value includes the attribute specialization hierarchy,
              starting with <xmlatt>props</xmlatt> or <xmlatt>base</xmlatt>:</p>
            <codeblock> 'a(', <varname>props-or-base</varname>, (' ', <varname>attname</varname>)+, ')'</codeblock>
            <p otherprops="examples">For example, the <xmlatt>mySelectAttribute</xmlatt> specialized
              from <xmlatt>props</xmlatt> results in the following value: <codeph>a(props
                mySelectAttribute)</codeph></p>
          </dd>
        </dlentry>
      </dl>
    </section>
<example id="example" otherprops="examples">
      <title>Example: Task with multiple domains</title>
      <p>In this example, a document-type shell integrates the task structural module and the
        following domain modules:</p>
      <simpletable frame="all" relcolwidth="1.0* 1.0*">
        <sthead>
          <stentry>Domain</stentry>
          <stentry>Domain short name</stentry>
        </sthead>
        <strow>
          <stentry>User interface</stentry>
          <stentry>ui-d</stentry>
        </strow>
        <strow>
          <stentry>Software</stentry>
          <stentry>sw-d</stentry>
        </strow>
        <strow>
          <stentry>Programming</stentry>
          <stentry>pr-d</stentry>
        </strow>
      </simpletable>
      <p>The value of the <xmlatt>domains</xmlatt> attribute includes one value from each module;
        the effective value is the following:</p>
      <codeblock>domains="(topic task) (topic ui-d) (topic sw-d) (topic pr-d)"</codeblock>
      <p>If the document-type shell also used a specialization of the programming domain that
        describes C++ programming (with a short name of "cpp-d"), the new C++ programming domain
        would add an additional value to the <xmlatt>domains</xmlatt> attribute:</p>
      <codeblock>domains="(topic task) (topic ui-d) (topic sw-d) (topic pr-d) <b>(topic pr-d cpp-d)</b>"</codeblock>
      <p>Note that the value for the <xmlatt>domains</xmlatt> attribute is not authored; Instead,
        the value is defaulted based on the modules that are included in the document type
        shell.</p>
    </example>
    <!--Dropped the following example; I think that this is now covered in the "for example" above.-->
    <!--<example rev="DITA1.3 proposal-13121 review-2" id="example-dependency"><title>Example: Dependency on multiple specializations</title><p>In this example, a <xmlelement>codeChecklist</xmlelement> specialization specializes from <xmlelement>reference</xmlelement> and includes elements from both <xmlelement>task</xmlelement> and the programming domain. The domain token for this module must declare its own ancestry and dependencies; when this module is used, the <xmlatt>domains</xmlatt> attribute must also include declarations for the domain and structural dependencies. For example:</p><codeblock>domains="...(topic reference checklist++task+pr-d) (topic task) (topic pr-d)"</codeblock></example>-->
</conbody>
</concept>

