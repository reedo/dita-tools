<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="key-based_addressing">
    <title>Indirect key-based addressing</title>
    <shortdesc>DITA keys provide an alternative to direct addressing. The key reference mechanism
        provides a layer of indirection so that resources (for example, URIs, metadata, or variable
        text strings) can be defined at the DITA map level instead of locally in each
        topic.</shortdesc>
    <conbody>
        <p >For information about using keys to define and reference controlled
            values, see <xref href="subject-scheme-maps-and-usage.dita"/>.</p>
        <note >The material in this section of the DITA specification is
            exceptionally complex; it is targeted at implementers who build processors and other
            rendering applications.</note>
        <!--<p>When using DITA topics in the context of different maps, it is often necessary to have relationships resolve to different resources. For example, a content reference to a <xmlelement>keyword</xmlelement> element that contains a product name might need to resolve to a different <xmlelement>keyword</xmlelement> element when used in a different product-specific map. The DITA key reference mechanism provides an indirect addressing mechanism that separates references (topicrefs, conrefs, cross references, etc.) from the direct address of the target. (A direct address is the address specified on the element that defines the key, for example, through the <xmlatt>href</xmlatt> attribute.) Linking elements can refer to key names; the key names then are bound to specific resources by maps. Different maps can bind the same key names to different resources. The binding of key names to resources is determined at processing time based on the current set of key definitions for the map context rather than from a static binding that is created when a topic or map is authored. </p>-->
        <!--<p><draft-comment author="Kristen James Eberlein" time="5 April 2010"><p>To address a review #3 comment from David Helfinstine, I broke the original topic (11 pages!) down into four child topics. (Caveat: This was quick and dirty work on an area that wasn't my primary responsibility.) This area needs additional work, so I did not add <xmlelement>shortdesc</xmlelement> elements for all new topics. I have the following concerns:<ul><li>I think this content is nested too deeply in the architecture.</li><li>Ideally, I think the examples should be integrated into the topics, rather than segregated into a separate topic.</li><li>Is the syntax for key based addressing covered in the language reference topics? While I think we need a sound overview of key-based addressing the in the arch spec topics, I think users will look first to the language reference when wanting to retrieve information about syntax.</li></ul></p></draft-comment></p>-->
        <!--<draft-comment author="Kristen Eberlein" time="7 May 2015"><p>Suggestions from targeted review:</p><ul><li>Eberlein and Nitchie: Add a sentence like "subjectScheme's use of keys for controlled values is a bit different and is covered [here]. "</li><li>Anderson and Eberlein: Consider adding a non-normative note that underscores the fact that the audience for the spec is implementers, that is, people building DITA processors, etc. Emphasis that the material in this topic cluster is especially oriented towards that audience, and might be difficult for others to grasp.</li><li>Doherty: A brief, two line example of the difference between direct and indirect addressing would help.</li></ul></draft-comment>-->
    </conbody>
</concept>
