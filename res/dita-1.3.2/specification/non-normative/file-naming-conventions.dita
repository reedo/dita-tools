<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="file-naming-conventions"  xml:lang="en-us">
 <title>File naming conventions</title>
 <shortdesc>The DITA OASIS Technical Committee uses certain conventions for the names of XML grammar
  files. We suggest using these conventions as a best practice to facilitate interchange of grammar
  files.</shortdesc>
 <conbody>
  <section id="unique-identifiers">
   <title>Globally unique identifiers</title>
   <p>Vocabulary modules that are intended <ph >for use</ph> outside of a
    narrowly-restricted context should have one or more associated, globally-unique names by which
    the modules can be referenced without regard to their local storage location. The
    globally-unique names can be public identifiers, URNs, or absolute URLs.</p>
  </section>
  <section id="document-type-shells">
   <title>Document type shells</title>
   <p>Document type shells should be given a name that distinguishes their name, owner, or
     purpose<ph >; for example, <filepath>acme-concept.dtd</filepath></ph>. The
    document type shells that are provided by the DITA Technical Committee use the root element of
    the primary specialization as the basis for the file name.</p>
  </section>
  <section id="module-names">
   <title>Module names</title>
   <p>Each vocabulary module has a short name that is used to construct entity names and other names
    that are used in associated declarations. Modules also can have abbreviated names that further
    shorten the short name, for example "sw-d" for the "software" domain, where "software" is the
    short name and "sw-d" is the abbreviated name. </p>
   <p>For structural modules, the module name should be the element type name of the top-level topic
    or map type defined by the module, such as "concept" or "bookmap".</p>
   <p>For element domain modules, the module name should be a name that reflects the subject domain
    to which the domain applies, such as "highlight" or "software". Domain module names should be
    sufficiently unique that they are unlikely to conflict with any other domains.</p>
   <draft-comment author="Kristen Eberlein" time="27 May 2015">
    <p>Let's be careful that we use the terms "short name" and "abbreviated name" consistently
     throughout the spec.</p>
   </draft-comment>
  </section>
  <section id="dtd-specialization-modules">
   <title>DTD-based specialization modules</title>
   <p>Use the following file-naming conventions for DTD-based specialization modules.</p>
   <simpletable frame="all" relcolwidth="1.0* 1.0* 1.0* 1.0*">
    <sthead>
     <stentry>Module type</stentry>
     <stentry>File name (entities)</stentry>
     <stentry>File name (elements)</stentry>
     <stentry>Example</stentry>
    </sthead>
    <strow>
     <stentry>Structural</stentry>
     <stentry><filepath><varname>ModuleName</varname>.ent</filepath></stentry>
     <stentry><filepath><varname>ModuleName</varname>.mod</filepath></stentry>
     <stentry><filepath>concept.ent</filepath> or <filepath>concept.mod</filepath>
     </stentry>
    </strow>
 
    <strow>
     <stentry>Element domain</stentry>
     <stentry><filepath><varname>DomainName</varname>Domain.ent</filepath></stentry>
     <stentry><filepath><varname>DomainName</varname>Domain.mod</filepath></stentry>
     <stentry><filepath>highlightDomain.ent</filepath> or
      <filepath>highlightDomain.mod</filepath></stentry>
    </strow>

    <strow>
     <stentry>Attribute domain</stentry>
     <stentry><filepath><varname>AttributeName</varname>AttDomain.ent</filepath></stentry>
     <stentry>Not applicable</stentry>
     <stentry><filepath>deliveryTargetAttDomain.ent</filepath>
     </stentry>
    </strow>
   </simpletable>
   <p>where:</p>
   <ul>
    <li><varname>ModuleName</varname> is the name of the element type, such as "concept" or
     "glossentry".</li>
    <li><varname>DomainName</varname> is the name of the domain, for example, "highlight" or
     "utilities".</li>
    <li><varname>AttributeName</varname> is the name of the specialized attribute, for example,
     "deliveryTarget".</li>
   </ul>
  </section>
  <section id="relax-ng-modules">
   <title>RELAX NG-based specialization modules</title>
   <p>Use the following file-naming conventions for RELAX NG-based specialization modules.</p>
   <simpletable frame="all" relcolwidth="1.0* 3.0* 1.0*">
    <sthead>
     <stentry>Module type</stentry>
     <stentry>File name</stentry>
     <stentry>Example</stentry>
    </sthead>
    <strow>
     <stentry>Structural</stentry>
     <stentry><filepath><varname>ModuleName</varname>Mod.<varname>rng</varname></filepath></stentry>
     <stentry><filepath>conceptMod.rng</filepath></stentry>
    </strow>
    <strow>
     <stentry>Element domain</stentry>
     <stentry><filepath><varname>DomainName</varname>DomainMod.rng</filepath></stentry>
     <stentry><filepath>highlightDomainMod.rng</filepath>
     </stentry>
    </strow>
    <strow >
     <stentry>Attribute domain</stentry>
     <stentry><filepath><varname>AttributeName</varname>AttDomain.rng</filepath></stentry>
     <stentry><filepath>deliveryTargetAttDomainMod.rng</filepath></stentry>
    </strow>
   </simpletable>
   <p>where:</p>
   <ul>
    <li><varname>ModuleName</varname> is the name of the element type, such as "concept" or
     "glossentry".</li>
    <li><varname>DomainName</varname> is the name of the domain, for example, "highlight" or
     "utilities".</li>
    <li><varname>AttributeName</varname> is the name of the specialized attribute, for example,
     "deliveryTarget".</li>
   </ul>
  </section>
  <section id="xsd-modules">
   <title>XSD-based specialization modules</title>
   <p>Use the following file-naming conventions for XSD-based specialization modules.</p>
   <simpletable frame="all" relcolwidth="0.8* 2.2* 2.0*">
    <sthead>
     <stentry>Module</stentry>
     <stentry>File name</stentry>
     <stentry>Example</stentry>
    </sthead>
    <strow>
     <stentry >Structural modules: Element  groups</stentry>
     <stentry><filepath><varname>ModuleName</varname>Grp.xsd</filepath></stentry>
     <stentry><filepath>conceptGrp.xsd</filepath></stentry>
    </strow>
    <strow>
     <stentry >Structural modules: All other declarations</stentry>
     <stentry><filepath><varname>ModuleName</varname>Mod.xsd</filepath></stentry>
     <stentry><filepath>conceptMod.xsd</filepath></stentry>
    </strow>
    <strow>
     <stentry>Domain modules</stentry>
     <stentry><filepath><varname>DomainName</varname>.xsd</filepath></stentry>
     <stentry><filepath>highlightDomain.xsd</filepath></stentry>
    </strow>
    <strow>
     <stentry>Attribute domain</stentry>
     <stentry><filepath><varname>AttributeName</varname>AttDomain.xsd</filepath></stentry>
     <stentry><filepath>deliveryTargetAttDomain.xsd</filepath></stentry>
    </strow>
   </simpletable>
   <p>where:</p>
   <ul>
    <li><varname>ModuleName</varname> is the name of the element type, such as "concept" or
     "glossentry".</li>
    <li><varname>DomainName</varname> is the name of the domain, for example, "highlight" or
     "utilities".</li>
    <li><varname>AttributeName</varname> is the name of the specialized attribute, for example,
     "deliveryTarget".</li>
   </ul>
  </section>
  <section id="constraint-modules">
   <title>Constraint modules</title>
   <p>Use the following file-naming conventions for constraint modules.</p>
   <dl>
    <dlentry>
     <dt>Structural modules</dt>
     <dd>
      <p>Structural constraint modules <ph >should</ph> be named using the
       following format:</p>
      <simpletable frame="all" relcolwidth="1.0* 3.0*" keycol="1">
       <strow>
        <stentry>DTD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>Constraint.mod</filepath></stentry>
       </strow>
       <strow>
        <stentry>RELAX NG</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>ConstraintMod.rng</filepath></stentry>
       </strow>
       <strow>
        <stentry>XSD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>Tagname</varname>ConstraintMod.xsd</filepath></stentry>
       </strow>
      </simpletable>
      <p>where:</p>
      <ul>
       <li conref="../common/conref-file.dita#reuse_file/qualifier-li"
        conrefend="../common/conref-file.dita#reuse_file/Tagname-li"/>
      </ul>
      <p otherprops="examples">For example, the file names for the constraint that is applied to the
       general task to create the strict task are <filepath>strictTaskbodyConstraint.mod</filepath>,
        <filepath>strictTaskbodyConstraintMod.rng</filepath>, or
        <filepath>strictTaskbodyConstraintMod.xsd</filepath>.</p>
     </dd>
    </dlentry>
    <dlentry>
     <dt>Domain modules</dt>
     <dd>
      <p>Domain constraint modules <ph >should</ph> be named using the
       following format:</p>
      <simpletable frame="all" relcolwidth="1.0* 3.0*" keycol="1">
       <strow>
        <stentry>DTD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraint.ent</filepath></stentry>
       </strow>
       <strow>
        <stentry>RELAX NG</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraintMod.rng</filepath></stentry>
       </strow>
       <strow>
        <stentry>XSD</stentry>
        <stentry><filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraintMod.xsd</filepath></stentry>
       </strow>
      </simpletable>
      <p>where: </p>
      <ul conref="../common/conref-file.dita#reuse_file/dtd-domains-constraint">
       <li/>
      </ul>
      <p otherprops="examples">For example, the file name for a constraint module that removes the
       syntax diagram from the programming domain might be
        <filepath>noSyntaxDiagramProgrammingDomainConstraint.ent</filepath>.</p>
      <!--<p otherprops="examples">For example, the name of a domain constraint module that removes syntax diagrams from the programming domain <ph rev="targeted-review">might be</ph> <filepath>noSyntaxDiagramProgrammingDomainConstraintMod.rng</filepath>.</p>-->
      <p>Because of restrictions on the redefine feature of XML Schema, it is sometimes necessary to
       use an intermediate level of redefinition, which requires a separate XSD document. In that
       case, the intermediate XSD document <ph >should</ph> be named
         <filepath><varname>qualifier</varname><varname>domain</varname>DomainConstraintsInt.xsd</filepath>.</p>
     </dd>
    </dlentry>
   </dl>
  </section>
 </conbody>
</concept>
